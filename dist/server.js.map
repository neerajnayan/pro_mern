{"version":3,"sources":["../server/server.js"],"names":["path","require","SourceMapSupport","install","app","use","express","static","bodyParser","json","get","req","res","db","collection","find","toArray","then","metadata","total_count","issues","length","_metadata","records","catch","console","log","error","status","message","post","newIssue","body","created","Date","err","Issue","validateIssue","insertOne","_id","result","insertedId","limit","next","join","__dirname","sendFile","MongoClient","connect","connection","listen"],"mappings":";;AAAA;;;;AAEA;;;;AACA;;AACA;;AACA;;;;AAGA;;;;;;AAPA,IAAMA,OAAOC,QAAQ,MAAR,CAAb;;AAKAC,2BAAiBC,OAAjB;;AAIA,IAAMC,MAAM,wBAAZ;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,IAAIC,GAAJ,CAAQC,kBAAQC,MAAR,CAAe,QAAf,CAAR;AACAH,IAAIC,GAAJ,CAAQG,qBAAWC,IAAX,EAAR;;AAEAL,IAAIM,GAAJ,CAAQ,aAAR,EAAuB,UAACC,GAAD,EAAMC,GAAN,EAAc;AACrC;AACA;;AAEIC,OAAGC,UAAH,CAAc,QAAd,EAAwBC,IAAxB,GAA+BC,OAA/B,GAAyCC,IAAzC,CAA8C,kBAAU;AACpD,YAAMC,WAAW,EAAEC,aAAaC,OAAOC,MAAtB,EAAjB;AACAT,YAAIH,IAAJ,CAAS,EAAEa,WAAWJ,QAAb,EAAuBK,SAASH,MAAhC,EAAT;AACH,KAHD,EAGGI,KAHH,CAGS,iBAAS;AACdC,gBAAQC,GAAR,CAAYC,KAAZ;AACAf,YAAIgB,MAAJ,CAAW,GAAX,EAAgBnB,IAAhB,CAAqB,EAAEoB,0CAAF,EAArB;AACH,KAND;AAOH,CAXD;;AAaAzB,IAAI0B,IAAJ,CAAS,aAAT,EAAwB,UAACnB,GAAD,EAAMC,GAAN,EAAc;AAClC,QAAMmB,WAAWpB,IAAIqB,IAArB;AACAD,aAASE,OAAT,GAAmB,IAAIC,IAAJ,EAAnB;AACA,QAAI,CAACH,SAASH,MAAd,EAAsB;AAClBG,iBAASH,MAAT,GAAkB,KAAlB;AACH;AACD,QAAMO,MAAMC,gBAAMC,aAAN,CAAoBN,QAApB,CAAZ;AACA,QAAII,GAAJ,EAAS;AACLvB,YAAIgB,MAAJ,CAAW,GAAX,EAAgBnB,IAAhB,CAAqB,EAACoB,+BAA6BM,GAA9B,EAArB;AACA;AACH;AACDtB,OAAGC,UAAH,CAAc,QAAd,EAAwBwB,SAAxB,CAAkCP,QAAlC,EAA4Cd,IAA5C,CAAiD;AAAA,eAC7CJ,GAAGC,UAAH,CAAc,QAAd,EAAwBC,IAAxB,CAA6B,EAAEwB,KAAKC,OAAOC,UAAd,EAA7B,EAAyDC,KAAzD,CAA+D,CAA/D,EAAkEC,IAAlE,EAD6C;AAAA,KAAjD,EAEK1B,IAFL,CAEU,oBAAY;AACdL,YAAIH,IAAJ,CAASsB,QAAT;AACH,KAJL,EAIOP,KAJP,CAIa,iBAAS;AAClBC,gBAAQC,GAAR,CAAYC,KAAZ;AACAf,YAAIgB,MAAJ,CAAW,GAAX,EAAgBnB,IAAhB,CAAqB,EAACoB,0CAAD,EAArB;AACH,KAPD;AAQH,CAnBD;;AAqBA;AACAzB,IAAIM,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAKC,GAAL,EAAa;AACtBa,YAAQC,GAAR,CAAY,QAAZ,EAAsB1B,KAAK4C,IAAL,CAAUC,YAAU,uBAApB,CAAtB;AACAjC,QAAIkC,QAAJ,CAAa9C,KAAK4C,IAAL,CAAUC,YAAU,aAApB,CAAb;AACH,CAHD;AAIApB,QAAQC,GAAR,CAAY,MAAZ;;AAEA,IAAIb,WAAJ;AACAkC,qBAAYC,OAAZ,CAAoB,2BAApB,EAAiD/B,IAAjD,CAAsD,sBAAc;AAChEJ,SAAKoC,WAAWpC,EAAX,CAAc,cAAd,CAAL;AACAT,QAAI8C,MAAJ,CAAW,IAAX,EAAiB,YAAW;AACxBzB,gBAAQC,GAAR,CAAY,0BAAZ;AACH,KAFD;AAGH,CALD,EAKGF,KALH,CAKS,iBAAS;AACdC,YAAQC,GAAR,CAAY,QAAZ,EAAsBC,KAAtB;AACH,CAPD","file":"server.js","sourcesContent":["import express from 'express';\r\nconst path = require('path');\r\nimport bodyParser from 'body-parser';\r\nimport 'babel-polyfill';\r\nimport { MongoClient } from 'mongodb';\r\nimport SourceMapSupport from 'source-map-support';\r\nSourceMapSupport.install();\r\n\r\nimport Issue from './issue.js';\r\n\r\nconst app = express();\r\n// express.static generates a middleware function which responds to\r\n// a request by trying to match the request URL with a file under a\r\n// directory specified by the parameter to the generator function.\r\n// If a file exists, it returns the contents of the file as the response; \r\n// if not, it chains to the next middleware function. \r\n// The middleware is mounted on the application using the applicationï¿½s use() method.\r\napp.use(express.static('static'));\r\napp.use(bodyParser.json());\r\n\r\napp.get('/api/issues', (req, res) => {\r\n//    const metadata = { total_count: issues.length };\r\n//    res.json({ _metadata: metadata, records: issues});\r\n    \r\n    db.collection('issues').find().toArray().then(issues => {\r\n        const metadata = { total_count: issues.length };\r\n        res.json({ _metadata: metadata, records: issues});\r\n    }).catch(error => {\r\n        console.log(error);\r\n        res.status(500).json({ message: `Internal Server Error: $(error)`});\r\n    });\r\n});\r\n\r\napp.post('/api/issues', (req, res) => {\r\n    const newIssue = req.body;\r\n    newIssue.created = new Date();\r\n    if (!newIssue.status) {\r\n        newIssue.status = 'New';\r\n    }\r\n    const err = Issue.validateIssue(newIssue);\r\n    if (err) {\r\n        res.status(422).json({message: `Invalid request: ${err}` });\r\n        return;\r\n    }\r\n    db.collection('issues').insertOne(newIssue).then(result => \r\n        db.collection('issues').find({ _id: result.insertedId }).limit(1).next())\r\n        .then(newIssue => {\r\n            res.json(newIssue);\r\n        }).catch(error => {\r\n        console.log(error);\r\n        res.status(500).json({message: `Internal server error: $(error)` });\r\n    });\r\n});\r\n\r\n// Handles any requests that don't match the ones above\r\napp.get('*', (req,res) => {\r\n    console.log('Path: ', path.join(__dirname+'/../static/index.html'));\r\n    res.sendFile(path.join(__dirname+'/../static/'));\r\n});\r\nconsole.log('sddd');\r\n\r\nlet db;\r\nMongoClient.connect('mongodb://localhost:27017').then(connection => {\r\n    db = connection.db('issuetracker');\r\n    app.listen(3000, function() {\r\n        console.log('App started on port 3000');\r\n    });\r\n}).catch(error => {\r\n    console.log('Error:', error);\r\n});\r\n"]}